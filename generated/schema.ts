// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class LiFiTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiFiTransfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiFiTransfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiFiTransfer", id.toString(), this);
  }

  static load(id: string): LiFiTransfer | null {
    return store.get("LiFiTransfer", id) as LiFiTransfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get integrator(): string {
    let value = this.get("integrator");
    return value.toString();
  }

  set integrator(value: string) {
    this.set("integrator", Value.fromString(value));
  }

  get referrer(): Bytes {
    let value = this.get("referrer");
    return value.toBytes();
  }

  set referrer(value: Bytes) {
    this.set("referrer", Value.fromBytes(value));
  }

  get sendingAssetId(): Bytes {
    let value = this.get("sendingAssetId");
    return value.toBytes();
  }

  set sendingAssetId(value: Bytes) {
    this.set("sendingAssetId", Value.fromBytes(value));
  }

  get receivingAssetId(): Bytes {
    let value = this.get("receivingAssetId");
    return value.toBytes();
  }

  set receivingAssetId(value: Bytes) {
    this.set("receivingAssetId", Value.fromBytes(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    return value.toBytes();
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get destinationChainId(): BigInt {
    let value = this.get("destinationChainId");
    return value.toBigInt();
  }

  set destinationChainId(value: BigInt) {
    this.set("destinationChainId", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
