// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AssetBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AssetBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AssetBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AssetBalance", id.toString(), this);
  }

  static load(id: string): AssetBalance | null {
    return store.get("AssetBalance", id) as AssetBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get router(): string {
    let value = this.get("router");
    return value.toString();
  }

  set router(value: string) {
    this.set("router", Value.fromString(value));
  }
}

export class LiFiTransfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiFiTransfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiFiTransfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiFiTransfer", id.toString(), this);
  }

  static load(id: string): LiFiTransfer | null {
    return store.get("LiFiTransfer", id) as LiFiTransfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get integrator(): string {
    let value = this.get("integrator");
    return value.toString();
  }

  set integrator(value: string) {
    this.set("integrator", Value.fromString(value));
  }

  get referrer(): Bytes {
    let value = this.get("referrer");
    return value.toBytes();
  }

  set referrer(value: Bytes) {
    this.set("referrer", Value.fromBytes(value));
  }

  get sendingAssetId(): Bytes {
    let value = this.get("sendingAssetId");
    return value.toBytes();
  }

  set sendingAssetId(value: Bytes) {
    this.set("sendingAssetId", Value.fromBytes(value));
  }

  get receivingAssetId(): Bytes {
    let value = this.get("receivingAssetId");
    return value.toBytes();
  }

  set receivingAssetId(value: Bytes) {
    this.set("receivingAssetId", Value.fromBytes(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    return value.toBytes();
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get destinationChainId(): BigInt {
    let value = this.get("destinationChainId");
    return value.toBigInt();
  }

  set destinationChainId(value: BigInt) {
    this.set("destinationChainId", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Router extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Router entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Router entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Router", id.toString(), this);
  }

  static load(id: string): Router | null {
    return store.get("Router", id) as Router | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assetBalances(): Array<string> {
    let value = this.get("assetBalances");
    return value.toStringArray();
  }

  set assetBalances(value: Array<string>) {
    this.set("assetBalances", Value.fromStringArray(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get chainId(): BigInt {
    let value = this.get("chainId");
    return value.toBigInt();
  }

  set chainId(value: BigInt) {
    this.set("chainId", Value.fromBigInt(value));
  }

  get preparedTimestamp(): BigInt {
    let value = this.get("preparedTimestamp");
    return value.toBigInt();
  }

  set preparedTimestamp(value: BigInt) {
    this.set("preparedTimestamp", Value.fromBigInt(value));
  }

  get receivingChainTxManagerAddress(): Bytes {
    let value = this.get("receivingChainTxManagerAddress");
    return value.toBytes();
  }

  set receivingChainTxManagerAddress(value: Bytes) {
    this.set("receivingChainTxManagerAddress", Value.fromBytes(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get router(): string {
    let value = this.get("router");
    return value.toString();
  }

  set router(value: string) {
    this.set("router", Value.fromString(value));
  }

  get sendingAssetId(): Bytes {
    let value = this.get("sendingAssetId");
    return value.toBytes();
  }

  set sendingAssetId(value: Bytes) {
    this.set("sendingAssetId", Value.fromBytes(value));
  }

  get receivingAssetId(): Bytes {
    let value = this.get("receivingAssetId");
    return value.toBytes();
  }

  set receivingAssetId(value: Bytes) {
    this.set("receivingAssetId", Value.fromBytes(value));
  }

  get sendingChainFallback(): Bytes {
    let value = this.get("sendingChainFallback");
    return value.toBytes();
  }

  set sendingChainFallback(value: Bytes) {
    this.set("sendingChainFallback", Value.fromBytes(value));
  }

  get callTo(): Bytes {
    let value = this.get("callTo");
    return value.toBytes();
  }

  set callTo(value: Bytes) {
    this.set("callTo", Value.fromBytes(value));
  }

  get receivingAddress(): Bytes {
    let value = this.get("receivingAddress");
    return value.toBytes();
  }

  set receivingAddress(value: Bytes) {
    this.set("receivingAddress", Value.fromBytes(value));
  }

  get callDataHash(): Bytes {
    let value = this.get("callDataHash");
    return value.toBytes();
  }

  set callDataHash(value: Bytes) {
    this.set("callDataHash", Value.fromBytes(value));
  }

  get transactionId(): Bytes {
    let value = this.get("transactionId");
    return value.toBytes();
  }

  set transactionId(value: Bytes) {
    this.set("transactionId", Value.fromBytes(value));
  }

  get sendingChainId(): BigInt {
    let value = this.get("sendingChainId");
    return value.toBigInt();
  }

  set sendingChainId(value: BigInt) {
    this.set("sendingChainId", Value.fromBigInt(value));
  }

  get receivingChainId(): BigInt {
    let value = this.get("receivingChainId");
    return value.toBigInt();
  }

  set receivingChainId(value: BigInt) {
    this.set("receivingChainId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get expiry(): BigInt {
    let value = this.get("expiry");
    return value.toBigInt();
  }

  set expiry(value: BigInt) {
    this.set("expiry", Value.fromBigInt(value));
  }

  get preparedBlockNumber(): BigInt {
    let value = this.get("preparedBlockNumber");
    return value.toBigInt();
  }

  set preparedBlockNumber(value: BigInt) {
    this.set("preparedBlockNumber", Value.fromBigInt(value));
  }

  get encryptedCallData(): string {
    let value = this.get("encryptedCallData");
    return value.toString();
  }

  set encryptedCallData(value: string) {
    this.set("encryptedCallData", Value.fromString(value));
  }

  get prepareCaller(): Bytes | null {
    let value = this.get("prepareCaller");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set prepareCaller(value: Bytes | null) {
    if (value === null) {
      this.unset("prepareCaller");
    } else {
      this.set("prepareCaller", Value.fromBytes(value as Bytes));
    }
  }

  get bidSignature(): Bytes {
    let value = this.get("bidSignature");
    return value.toBytes();
  }

  set bidSignature(value: Bytes) {
    this.set("bidSignature", Value.fromBytes(value));
  }

  get encodedBid(): Bytes {
    let value = this.get("encodedBid");
    return value.toBytes();
  }

  set encodedBid(value: Bytes) {
    this.set("encodedBid", Value.fromBytes(value));
  }

  get prepareTransactionHash(): Bytes {
    let value = this.get("prepareTransactionHash");
    return value.toBytes();
  }

  set prepareTransactionHash(value: Bytes) {
    this.set("prepareTransactionHash", Value.fromBytes(value));
  }

  get relayerFee(): BigInt | null {
    let value = this.get("relayerFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set relayerFee(value: BigInt | null) {
    if (value === null) {
      this.unset("relayerFee");
    } else {
      this.set("relayerFee", Value.fromBigInt(value as BigInt));
    }
  }

  get signature(): Bytes | null {
    let value = this.get("signature");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set signature(value: Bytes | null) {
    if (value === null) {
      this.unset("signature");
    } else {
      this.set("signature", Value.fromBytes(value as Bytes));
    }
  }

  get callData(): string | null {
    let value = this.get("callData");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set callData(value: string | null) {
    if (value === null) {
      this.unset("callData");
    } else {
      this.set("callData", Value.fromString(value as string));
    }
  }

  get externalCallSuccess(): boolean {
    let value = this.get("externalCallSuccess");
    return value.toBoolean();
  }

  set externalCallSuccess(value: boolean) {
    this.set("externalCallSuccess", Value.fromBoolean(value));
  }

  get externalCallReturnData(): Bytes | null {
    let value = this.get("externalCallReturnData");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set externalCallReturnData(value: Bytes | null) {
    if (value === null) {
      this.unset("externalCallReturnData");
    } else {
      this.set("externalCallReturnData", Value.fromBytes(value as Bytes));
    }
  }

  get fulfillCaller(): Bytes | null {
    let value = this.get("fulfillCaller");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fulfillCaller(value: Bytes | null) {
    if (value === null) {
      this.unset("fulfillCaller");
    } else {
      this.set("fulfillCaller", Value.fromBytes(value as Bytes));
    }
  }

  get fulfillTransactionHash(): Bytes | null {
    let value = this.get("fulfillTransactionHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fulfillTransactionHash(value: Bytes | null) {
    if (value === null) {
      this.unset("fulfillTransactionHash");
    } else {
      this.set("fulfillTransactionHash", Value.fromBytes(value as Bytes));
    }
  }

  get fulfillTimestamp(): BigInt | null {
    let value = this.get("fulfillTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fulfillTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("fulfillTimestamp");
    } else {
      this.set("fulfillTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get cancelCaller(): Bytes | null {
    let value = this.get("cancelCaller");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set cancelCaller(value: Bytes | null) {
    if (value === null) {
      this.unset("cancelCaller");
    } else {
      this.set("cancelCaller", Value.fromBytes(value as Bytes));
    }
  }

  get cancelTransactionHash(): Bytes | null {
    let value = this.get("cancelTransactionHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set cancelTransactionHash(value: Bytes | null) {
    if (value === null) {
      this.unset("cancelTransactionHash");
    } else {
      this.set("cancelTransactionHash", Value.fromBytes(value as Bytes));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactions(): Array<string> {
    let value = this.get("transactions");
    return value.toStringArray();
  }

  set transactions(value: Array<string>) {
    this.set("transactions", Value.fromStringArray(value));
  }
}
