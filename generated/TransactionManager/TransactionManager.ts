// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AssetAdded extends ethereum.Event {
  get params(): AssetAdded__Params {
    return new AssetAdded__Params(this);
  }
}

export class AssetAdded__Params {
  _event: AssetAdded;

  constructor(event: AssetAdded) {
    this._event = event;
  }

  get addedAssetId(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AssetRemoved extends ethereum.Event {
  get params(): AssetRemoved__Params {
    return new AssetRemoved__Params(this);
  }
}

export class AssetRemoved__Params {
  _event: AssetRemoved;

  constructor(event: AssetRemoved) {
    this._event = event;
  }

  get removedAssetId(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LiquidityAdded extends ethereum.Event {
  get params(): LiquidityAdded__Params {
    return new LiquidityAdded__Params(this);
  }
}

export class LiquidityAdded__Params {
  _event: LiquidityAdded;

  constructor(event: LiquidityAdded) {
    this._event = event;
  }

  get router(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assetId(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class LiquidityRemoved extends ethereum.Event {
  get params(): LiquidityRemoved__Params {
    return new LiquidityRemoved__Params(this);
  }
}

export class LiquidityRemoved__Params {
  _event: LiquidityRemoved;

  constructor(event: LiquidityRemoved) {
    this._event = event;
  }

  get router(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get assetId(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OwnershipProposed extends ethereum.Event {
  get params(): OwnershipProposed__Params {
    return new OwnershipProposed__Params(this);
  }
}

export class OwnershipProposed__Params {
  _event: OwnershipProposed;

  constructor(event: OwnershipProposed) {
    this._event = event;
  }

  get proposedOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RouterAdded extends ethereum.Event {
  get params(): RouterAdded__Params {
    return new RouterAdded__Params(this);
  }
}

export class RouterAdded__Params {
  _event: RouterAdded;

  constructor(event: RouterAdded) {
    this._event = event;
  }

  get addedRouter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RouterRemoved extends ethereum.Event {
  get params(): RouterRemoved__Params {
    return new RouterRemoved__Params(this);
  }
}

export class RouterRemoved__Params {
  _event: RouterRemoved;

  constructor(event: RouterRemoved) {
    this._event = event;
  }

  get removedRouter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TransactionCancelled extends ethereum.Event {
  get params(): TransactionCancelled__Params {
    return new TransactionCancelled__Params(this);
  }
}

export class TransactionCancelled__Params {
  _event: TransactionCancelled;

  constructor(event: TransactionCancelled) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get router(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get transactionId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get txData(): TransactionCancelledTxDataStruct {
    return this._event.parameters[3].value.toTuple() as TransactionCancelledTxDataStruct;
  }

  get caller(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class TransactionCancelledTxDataStruct extends ethereum.Tuple {
  get receivingChainTxManagerAddress(): Address {
    return this[0].toAddress();
  }

  get user(): Address {
    return this[1].toAddress();
  }

  get router(): Address {
    return this[2].toAddress();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainFallback(): Address {
    return this[5].toAddress();
  }

  get receivingAddress(): Address {
    return this[6].toAddress();
  }

  get callTo(): Address {
    return this[7].toAddress();
  }

  get callDataHash(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get sendingChainId(): BigInt {
    return this[10].toBigInt();
  }

  get receivingChainId(): BigInt {
    return this[11].toBigInt();
  }

  get amount(): BigInt {
    return this[12].toBigInt();
  }

  get expiry(): BigInt {
    return this[13].toBigInt();
  }

  get preparedBlockNumber(): BigInt {
    return this[14].toBigInt();
  }
}

export class TransactionFulfilled extends ethereum.Event {
  get params(): TransactionFulfilled__Params {
    return new TransactionFulfilled__Params(this);
  }
}

export class TransactionFulfilled__Params {
  _event: TransactionFulfilled;

  constructor(event: TransactionFulfilled) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get router(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get transactionId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get txData(): TransactionFulfilledTxDataStruct {
    return this._event.parameters[3].value.toTuple() as TransactionFulfilledTxDataStruct;
  }

  get relayerFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get signature(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get callData(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }

  get success(): boolean {
    return this._event.parameters[7].value.toBoolean();
  }

  get returnData(): Bytes {
    return this._event.parameters[8].value.toBytes();
  }

  get caller(): Address {
    return this._event.parameters[9].value.toAddress();
  }
}

export class TransactionFulfilledTxDataStruct extends ethereum.Tuple {
  get receivingChainTxManagerAddress(): Address {
    return this[0].toAddress();
  }

  get user(): Address {
    return this[1].toAddress();
  }

  get router(): Address {
    return this[2].toAddress();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainFallback(): Address {
    return this[5].toAddress();
  }

  get receivingAddress(): Address {
    return this[6].toAddress();
  }

  get callTo(): Address {
    return this[7].toAddress();
  }

  get callDataHash(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get sendingChainId(): BigInt {
    return this[10].toBigInt();
  }

  get receivingChainId(): BigInt {
    return this[11].toBigInt();
  }

  get amount(): BigInt {
    return this[12].toBigInt();
  }

  get expiry(): BigInt {
    return this[13].toBigInt();
  }

  get preparedBlockNumber(): BigInt {
    return this[14].toBigInt();
  }
}

export class TransactionPrepared extends ethereum.Event {
  get params(): TransactionPrepared__Params {
    return new TransactionPrepared__Params(this);
  }
}

export class TransactionPrepared__Params {
  _event: TransactionPrepared;

  constructor(event: TransactionPrepared) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get router(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get transactionId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get txData(): TransactionPreparedTxDataStruct {
    return this._event.parameters[3].value.toTuple() as TransactionPreparedTxDataStruct;
  }

  get caller(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get encryptedCallData(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get encodedBid(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }

  get bidSignature(): Bytes {
    return this._event.parameters[7].value.toBytes();
  }
}

export class TransactionPreparedTxDataStruct extends ethereum.Tuple {
  get receivingChainTxManagerAddress(): Address {
    return this[0].toAddress();
  }

  get user(): Address {
    return this[1].toAddress();
  }

  get router(): Address {
    return this[2].toAddress();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainFallback(): Address {
    return this[5].toAddress();
  }

  get receivingAddress(): Address {
    return this[6].toAddress();
  }

  get callTo(): Address {
    return this[7].toAddress();
  }

  get callDataHash(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get sendingChainId(): BigInt {
    return this[10].toBigInt();
  }

  get receivingChainId(): BigInt {
    return this[11].toBigInt();
  }

  get amount(): BigInt {
    return this[12].toBigInt();
  }

  get expiry(): BigInt {
    return this[13].toBigInt();
  }

  get preparedBlockNumber(): BigInt {
    return this[14].toBigInt();
  }
}

export class TransactionManager__cancelResultValue0Struct extends ethereum.Tuple {
  get receivingChainTxManagerAddress(): Address {
    return this[0].toAddress();
  }

  get user(): Address {
    return this[1].toAddress();
  }

  get router(): Address {
    return this[2].toAddress();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainFallback(): Address {
    return this[5].toAddress();
  }

  get receivingAddress(): Address {
    return this[6].toAddress();
  }

  get callTo(): Address {
    return this[7].toAddress();
  }

  get callDataHash(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get sendingChainId(): BigInt {
    return this[10].toBigInt();
  }

  get receivingChainId(): BigInt {
    return this[11].toBigInt();
  }

  get amount(): BigInt {
    return this[12].toBigInt();
  }

  get expiry(): BigInt {
    return this[13].toBigInt();
  }

  get preparedBlockNumber(): BigInt {
    return this[14].toBigInt();
  }
}

export class TransactionManager__cancelInputTxDataStruct extends ethereum.Tuple {
  get receivingChainTxManagerAddress(): Address {
    return this[0].toAddress();
  }

  get user(): Address {
    return this[1].toAddress();
  }

  get router(): Address {
    return this[2].toAddress();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainFallback(): Address {
    return this[5].toAddress();
  }

  get receivingAddress(): Address {
    return this[6].toAddress();
  }

  get callTo(): Address {
    return this[7].toAddress();
  }

  get callDataHash(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get sendingChainId(): BigInt {
    return this[10].toBigInt();
  }

  get receivingChainId(): BigInt {
    return this[11].toBigInt();
  }

  get amount(): BigInt {
    return this[12].toBigInt();
  }

  get expiry(): BigInt {
    return this[13].toBigInt();
  }

  get preparedBlockNumber(): BigInt {
    return this[14].toBigInt();
  }
}

export class TransactionManager__fulfillResultValue0Struct extends ethereum.Tuple {
  get receivingChainTxManagerAddress(): Address {
    return this[0].toAddress();
  }

  get user(): Address {
    return this[1].toAddress();
  }

  get router(): Address {
    return this[2].toAddress();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainFallback(): Address {
    return this[5].toAddress();
  }

  get receivingAddress(): Address {
    return this[6].toAddress();
  }

  get callTo(): Address {
    return this[7].toAddress();
  }

  get callDataHash(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get sendingChainId(): BigInt {
    return this[10].toBigInt();
  }

  get receivingChainId(): BigInt {
    return this[11].toBigInt();
  }

  get amount(): BigInt {
    return this[12].toBigInt();
  }

  get expiry(): BigInt {
    return this[13].toBigInt();
  }

  get preparedBlockNumber(): BigInt {
    return this[14].toBigInt();
  }
}

export class TransactionManager__fulfillInputTxDataStruct extends ethereum.Tuple {
  get receivingChainTxManagerAddress(): Address {
    return this[0].toAddress();
  }

  get user(): Address {
    return this[1].toAddress();
  }

  get router(): Address {
    return this[2].toAddress();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainFallback(): Address {
    return this[5].toAddress();
  }

  get receivingAddress(): Address {
    return this[6].toAddress();
  }

  get callTo(): Address {
    return this[7].toAddress();
  }

  get callDataHash(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get sendingChainId(): BigInt {
    return this[10].toBigInt();
  }

  get receivingChainId(): BigInt {
    return this[11].toBigInt();
  }

  get amount(): BigInt {
    return this[12].toBigInt();
  }

  get expiry(): BigInt {
    return this[13].toBigInt();
  }

  get preparedBlockNumber(): BigInt {
    return this[14].toBigInt();
  }
}

export class TransactionManager extends ethereum.SmartContract {
  static bind(address: Address): TransactionManager {
    return new TransactionManager("TransactionManager", address);
  }

  MAX_TIMEOUT(): BigInt {
    let result = super.call("MAX_TIMEOUT", "MAX_TIMEOUT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_TIMEOUT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_TIMEOUT", "MAX_TIMEOUT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_TIMEOUT(): BigInt {
    let result = super.call("MIN_TIMEOUT", "MIN_TIMEOUT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_TIMEOUT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MIN_TIMEOUT", "MIN_TIMEOUT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approvedAssets(param0: Address): boolean {
    let result = super.call(
      "approvedAssets",
      "approvedAssets(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_approvedAssets(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvedAssets",
      "approvedAssets(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approvedRouters(param0: Address): boolean {
    let result = super.call(
      "approvedRouters",
      "approvedRouters(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_approvedRouters(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approvedRouters",
      "approvedRouters(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  cancel(
    txData: TransactionManager__cancelInputTxDataStruct,
    signature: Bytes
  ): TransactionManager__cancelResultValue0Struct {
    let result = super.call(
      "cancel",
      "cancel((address,address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),bytes):((address,address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromTuple(txData), ethereum.Value.fromBytes(signature)]
    );

    return result[0].toTuple() as TransactionManager__cancelResultValue0Struct;
  }

  try_cancel(
    txData: TransactionManager__cancelInputTxDataStruct,
    signature: Bytes
  ): ethereum.CallResult<TransactionManager__cancelResultValue0Struct> {
    let result = super.tryCall(
      "cancel",
      "cancel((address,address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),bytes):((address,address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromTuple(txData), ethereum.Value.fromBytes(signature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as TransactionManager__cancelResultValue0Struct
    );
  }

  delay(): BigInt {
    let result = super.call("delay", "delay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_delay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("delay", "delay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fulfill(
    txData: TransactionManager__fulfillInputTxDataStruct,
    relayerFee: BigInt,
    signature: Bytes,
    callData: Bytes
  ): TransactionManager__fulfillResultValue0Struct {
    let result = super.call(
      "fulfill",
      "fulfill((address,address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes,bytes):((address,address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTuple(txData),
        ethereum.Value.fromUnsignedBigInt(relayerFee),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromBytes(callData)
      ]
    );

    return result[0].toTuple() as TransactionManager__fulfillResultValue0Struct;
  }

  try_fulfill(
    txData: TransactionManager__fulfillInputTxDataStruct,
    relayerFee: BigInt,
    signature: Bytes,
    callData: Bytes
  ): ethereum.CallResult<TransactionManager__fulfillResultValue0Struct> {
    let result = super.tryCall(
      "fulfill",
      "fulfill((address,address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256),uint256,bytes,bytes):((address,address,address,address,address,address,address,address,bytes32,bytes32,uint256,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromTuple(txData),
        ethereum.Value.fromUnsignedBigInt(relayerFee),
        ethereum.Value.fromBytes(signature),
        ethereum.Value.fromBytes(callData)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as TransactionManager__fulfillResultValue0Struct
    );
  }

  getChainId(): BigInt {
    let result = super.call("getChainId", "getChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainId", "getChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStoredChainId(): BigInt {
    let result = super.call(
      "getStoredChainId",
      "getStoredChainId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStoredChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStoredChainId",
      "getStoredChainId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interpreter(): Address {
    let result = super.call("interpreter", "interpreter():(address)", []);

    return result[0].toAddress();
  }

  try_interpreter(): ethereum.CallResult<Address> {
    let result = super.tryCall("interpreter", "interpreter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposed(): Address {
    let result = super.call("proposed", "proposed():(address)", []);

    return result[0].toAddress();
  }

  try_proposed(): ethereum.CallResult<Address> {
    let result = super.tryCall("proposed", "proposed():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposedTimestamp(): BigInt {
    let result = super.call(
      "proposedTimestamp",
      "proposedTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposedTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposedTimestamp",
      "proposedTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  renounced(): boolean {
    let result = super.call("renounced", "renounced():(bool)", []);

    return result[0].toBoolean();
  }

  try_renounced(): ethereum.CallResult<boolean> {
    let result = super.tryCall("renounced", "renounced():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  routerBalances(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "routerBalances",
      "routerBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_routerBalances(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "routerBalances",
      "routerBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  variantTransactionData(param0: Bytes): Bytes {
    let result = super.call(
      "variantTransactionData",
      "variantTransactionData(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBytes();
  }

  try_variantTransactionData(param0: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "variantTransactionData",
      "variantTransactionData(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _chainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptProposedOwnerCall extends ethereum.Call {
  get inputs(): AcceptProposedOwnerCall__Inputs {
    return new AcceptProposedOwnerCall__Inputs(this);
  }

  get outputs(): AcceptProposedOwnerCall__Outputs {
    return new AcceptProposedOwnerCall__Outputs(this);
  }
}

export class AcceptProposedOwnerCall__Inputs {
  _call: AcceptProposedOwnerCall;

  constructor(call: AcceptProposedOwnerCall) {
    this._call = call;
  }
}

export class AcceptProposedOwnerCall__Outputs {
  _call: AcceptProposedOwnerCall;

  constructor(call: AcceptProposedOwnerCall) {
    this._call = call;
  }
}

export class AddAssetIdCall extends ethereum.Call {
  get inputs(): AddAssetIdCall__Inputs {
    return new AddAssetIdCall__Inputs(this);
  }

  get outputs(): AddAssetIdCall__Outputs {
    return new AddAssetIdCall__Outputs(this);
  }
}

export class AddAssetIdCall__Inputs {
  _call: AddAssetIdCall;

  constructor(call: AddAssetIdCall) {
    this._call = call;
  }

  get assetId(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAssetIdCall__Outputs {
  _call: AddAssetIdCall;

  constructor(call: AddAssetIdCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get assetId(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }
}

export class AddLiquidityForCall extends ethereum.Call {
  get inputs(): AddLiquidityForCall__Inputs {
    return new AddLiquidityForCall__Inputs(this);
  }

  get outputs(): AddLiquidityForCall__Outputs {
    return new AddLiquidityForCall__Outputs(this);
  }
}

export class AddLiquidityForCall__Inputs {
  _call: AddLiquidityForCall;

  constructor(call: AddLiquidityForCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get assetId(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get router(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddLiquidityForCall__Outputs {
  _call: AddLiquidityForCall;

  constructor(call: AddLiquidityForCall) {
    this._call = call;
  }
}

export class AddRouterCall extends ethereum.Call {
  get inputs(): AddRouterCall__Inputs {
    return new AddRouterCall__Inputs(this);
  }

  get outputs(): AddRouterCall__Outputs {
    return new AddRouterCall__Outputs(this);
  }
}

export class AddRouterCall__Inputs {
  _call: AddRouterCall;

  constructor(call: AddRouterCall) {
    this._call = call;
  }

  get router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddRouterCall__Outputs {
  _call: AddRouterCall;

  constructor(call: AddRouterCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get txData(): CancelCallTxDataStruct {
    return this._call.inputValues[0].value.toTuple() as CancelCallTxDataStruct;
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get value0(): CancelCallValue0Struct {
    return this._call.outputValues[0].value.toTuple() as CancelCallValue0Struct;
  }
}

export class CancelCallTxDataStruct extends ethereum.Tuple {
  get receivingChainTxManagerAddress(): Address {
    return this[0].toAddress();
  }

  get user(): Address {
    return this[1].toAddress();
  }

  get router(): Address {
    return this[2].toAddress();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainFallback(): Address {
    return this[5].toAddress();
  }

  get receivingAddress(): Address {
    return this[6].toAddress();
  }

  get callTo(): Address {
    return this[7].toAddress();
  }

  get callDataHash(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get sendingChainId(): BigInt {
    return this[10].toBigInt();
  }

  get receivingChainId(): BigInt {
    return this[11].toBigInt();
  }

  get amount(): BigInt {
    return this[12].toBigInt();
  }

  get expiry(): BigInt {
    return this[13].toBigInt();
  }

  get preparedBlockNumber(): BigInt {
    return this[14].toBigInt();
  }
}

export class CancelCallValue0Struct extends ethereum.Tuple {
  get receivingChainTxManagerAddress(): Address {
    return this[0].toAddress();
  }

  get user(): Address {
    return this[1].toAddress();
  }

  get router(): Address {
    return this[2].toAddress();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainFallback(): Address {
    return this[5].toAddress();
  }

  get receivingAddress(): Address {
    return this[6].toAddress();
  }

  get callTo(): Address {
    return this[7].toAddress();
  }

  get callDataHash(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get sendingChainId(): BigInt {
    return this[10].toBigInt();
  }

  get receivingChainId(): BigInt {
    return this[11].toBigInt();
  }

  get amount(): BigInt {
    return this[12].toBigInt();
  }

  get expiry(): BigInt {
    return this[13].toBigInt();
  }

  get preparedBlockNumber(): BigInt {
    return this[14].toBigInt();
  }
}

export class FulfillCall extends ethereum.Call {
  get inputs(): FulfillCall__Inputs {
    return new FulfillCall__Inputs(this);
  }

  get outputs(): FulfillCall__Outputs {
    return new FulfillCall__Outputs(this);
  }
}

export class FulfillCall__Inputs {
  _call: FulfillCall;

  constructor(call: FulfillCall) {
    this._call = call;
  }

  get txData(): FulfillCallTxDataStruct {
    return this._call.inputValues[0].value.toTuple() as FulfillCallTxDataStruct;
  }

  get relayerFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get callData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class FulfillCall__Outputs {
  _call: FulfillCall;

  constructor(call: FulfillCall) {
    this._call = call;
  }

  get value0(): FulfillCallValue0Struct {
    return this._call.outputValues[0].value.toTuple() as FulfillCallValue0Struct;
  }
}

export class FulfillCallTxDataStruct extends ethereum.Tuple {
  get receivingChainTxManagerAddress(): Address {
    return this[0].toAddress();
  }

  get user(): Address {
    return this[1].toAddress();
  }

  get router(): Address {
    return this[2].toAddress();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainFallback(): Address {
    return this[5].toAddress();
  }

  get receivingAddress(): Address {
    return this[6].toAddress();
  }

  get callTo(): Address {
    return this[7].toAddress();
  }

  get callDataHash(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get sendingChainId(): BigInt {
    return this[10].toBigInt();
  }

  get receivingChainId(): BigInt {
    return this[11].toBigInt();
  }

  get amount(): BigInt {
    return this[12].toBigInt();
  }

  get expiry(): BigInt {
    return this[13].toBigInt();
  }

  get preparedBlockNumber(): BigInt {
    return this[14].toBigInt();
  }
}

export class FulfillCallValue0Struct extends ethereum.Tuple {
  get receivingChainTxManagerAddress(): Address {
    return this[0].toAddress();
  }

  get user(): Address {
    return this[1].toAddress();
  }

  get router(): Address {
    return this[2].toAddress();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainFallback(): Address {
    return this[5].toAddress();
  }

  get receivingAddress(): Address {
    return this[6].toAddress();
  }

  get callTo(): Address {
    return this[7].toAddress();
  }

  get callDataHash(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get sendingChainId(): BigInt {
    return this[10].toBigInt();
  }

  get receivingChainId(): BigInt {
    return this[11].toBigInt();
  }

  get amount(): BigInt {
    return this[12].toBigInt();
  }

  get expiry(): BigInt {
    return this[13].toBigInt();
  }

  get preparedBlockNumber(): BigInt {
    return this[14].toBigInt();
  }
}

export class PrepareCall extends ethereum.Call {
  get inputs(): PrepareCall__Inputs {
    return new PrepareCall__Inputs(this);
  }

  get outputs(): PrepareCall__Outputs {
    return new PrepareCall__Outputs(this);
  }
}

export class PrepareCall__Inputs {
  _call: PrepareCall;

  constructor(call: PrepareCall) {
    this._call = call;
  }

  get invariantData(): PrepareCallInvariantDataStruct {
    return this._call.inputValues[0].value.toTuple() as PrepareCallInvariantDataStruct;
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get encryptedCallData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get encodedBid(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get bidSignature(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class PrepareCall__Outputs {
  _call: PrepareCall;

  constructor(call: PrepareCall) {
    this._call = call;
  }

  get value0(): PrepareCallValue0Struct {
    return this._call.outputValues[0].value.toTuple() as PrepareCallValue0Struct;
  }
}

export class PrepareCallInvariantDataStruct extends ethereum.Tuple {
  get receivingChainTxManagerAddress(): Address {
    return this[0].toAddress();
  }

  get user(): Address {
    return this[1].toAddress();
  }

  get router(): Address {
    return this[2].toAddress();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainFallback(): Address {
    return this[5].toAddress();
  }

  get receivingAddress(): Address {
    return this[6].toAddress();
  }

  get callTo(): Address {
    return this[7].toAddress();
  }

  get sendingChainId(): BigInt {
    return this[8].toBigInt();
  }

  get receivingChainId(): BigInt {
    return this[9].toBigInt();
  }

  get callDataHash(): Bytes {
    return this[10].toBytes();
  }

  get transactionId(): Bytes {
    return this[11].toBytes();
  }
}

export class PrepareCallValue0Struct extends ethereum.Tuple {
  get receivingChainTxManagerAddress(): Address {
    return this[0].toAddress();
  }

  get user(): Address {
    return this[1].toAddress();
  }

  get router(): Address {
    return this[2].toAddress();
  }

  get sendingAssetId(): Address {
    return this[3].toAddress();
  }

  get receivingAssetId(): Address {
    return this[4].toAddress();
  }

  get sendingChainFallback(): Address {
    return this[5].toAddress();
  }

  get receivingAddress(): Address {
    return this[6].toAddress();
  }

  get callTo(): Address {
    return this[7].toAddress();
  }

  get callDataHash(): Bytes {
    return this[8].toBytes();
  }

  get transactionId(): Bytes {
    return this[9].toBytes();
  }

  get sendingChainId(): BigInt {
    return this[10].toBigInt();
  }

  get receivingChainId(): BigInt {
    return this[11].toBigInt();
  }

  get amount(): BigInt {
    return this[12].toBigInt();
  }

  get expiry(): BigInt {
    return this[13].toBigInt();
  }

  get preparedBlockNumber(): BigInt {
    return this[14].toBigInt();
  }
}

export class ProposeNewOwnerCall extends ethereum.Call {
  get inputs(): ProposeNewOwnerCall__Inputs {
    return new ProposeNewOwnerCall__Inputs(this);
  }

  get outputs(): ProposeNewOwnerCall__Outputs {
    return new ProposeNewOwnerCall__Outputs(this);
  }
}

export class ProposeNewOwnerCall__Inputs {
  _call: ProposeNewOwnerCall;

  constructor(call: ProposeNewOwnerCall) {
    this._call = call;
  }

  get newlyProposed(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ProposeNewOwnerCall__Outputs {
  _call: ProposeNewOwnerCall;

  constructor(call: ProposeNewOwnerCall) {
    this._call = call;
  }
}

export class RemoveAssetIdCall extends ethereum.Call {
  get inputs(): RemoveAssetIdCall__Inputs {
    return new RemoveAssetIdCall__Inputs(this);
  }

  get outputs(): RemoveAssetIdCall__Outputs {
    return new RemoveAssetIdCall__Outputs(this);
  }
}

export class RemoveAssetIdCall__Inputs {
  _call: RemoveAssetIdCall;

  constructor(call: RemoveAssetIdCall) {
    this._call = call;
  }

  get assetId(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAssetIdCall__Outputs {
  _call: RemoveAssetIdCall;

  constructor(call: RemoveAssetIdCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get assetId(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }
}

export class RemoveRouterCall extends ethereum.Call {
  get inputs(): RemoveRouterCall__Inputs {
    return new RemoveRouterCall__Inputs(this);
  }

  get outputs(): RemoveRouterCall__Outputs {
    return new RemoveRouterCall__Outputs(this);
  }
}

export class RemoveRouterCall__Inputs {
  _call: RemoveRouterCall;

  constructor(call: RemoveRouterCall) {
    this._call = call;
  }

  get router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveRouterCall__Outputs {
  _call: RemoveRouterCall;

  constructor(call: RemoveRouterCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}
